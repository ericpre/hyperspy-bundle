name: Release

on:
  push:
    branches:
      - '*'
    tags:
      - '*'
  pull_request:
    branches:
      - master

jobs:
  create_release_job:
    name: Create Release (on tag only)
    runs-on: ubuntu-latest
    outputs: 
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      VERSION: ${{ env.VERSION }}
    steps:
      - uses: actions/checkout@v2
      - name: Create Release
        if: startsWith(github.ref, 'refs/tags/')
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false
      - name: Get version (on tag)
        if: startsWith(github.ref, 'refs/tags/')
        run: |
          echo "VERSION=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV
      - name: Get version (short hash)
        if: "!startsWith(github.ref, 'refs/tags/')"
        run: |
          # Use git short hash instead of tag
          echo "VERSION=$(git rev-parse --short HEAD)" >> $GITHUB_ENV
      - name: Display version
        run: |
          echo ${{ env.VERSION }}

  build:
    name: ${{ matrix.config.os }}
    needs: create_release_job
    runs-on: ${{ matrix.config.os }}-latest
    strategy:
      fail-fast: false
      matrix:
        config:
          - os: macos
            INSTALLER_EXTENSION: pkg
          - os: ubuntu
            INSTALLER_EXTENSION: sh
          - os: windows
            INSTALLER_EXTENSION: exe
    env:
      MPLBACKEND: agg
      TEST_DEPS: pytest pytest-mpl
      LIB_TO_TEST: hyperspy

    steps:
      - uses: actions/checkout@v2
      - uses: conda-incubator/setup-miniconda@v2
        with:
          auto-update-conda: true
          python-version: 3.7

      - shell: bash -l {0}
        name: Conda info
        run: |
          conda info
          conda list

      - shell: bash -l {0}
        name: Install constructor
        run: |
          conda install constructor --only-deps
          conda install jinja2
          pip install https://github.com/ericpre/constructor/archive/master.zip --no-deps

      - shell: bash -l {0}
        name: Build distribution
        env:
          VERSION: ${{ needs.create_release_job.outputs.VERSION }}
        run: |
          conda config --set channel_priority strict
          constructor -v conda_distribution

      - shell: bash -l {0}
        name: Set asset name
        run: |
          installer_name=(HyperSpy-*.${{ matrix.config.INSTALLER_EXTENSION }})
          echo "asset_name=$installer_name" >> $GITHUB_ENV
          echo $installer_name

      - name: Get hash
        run: |
          shasum -a 256 ${{ env.asset_name }}

      - name: Install new distribution (Linux)
        if: runner.os == 'linux'
        env:
          install_dir: '${{ github.workspace }}/new_distribution'
        run: |
          echo "install_dir=${{ env.install_dir }}" >> $GITHUB_ENV
          bash ${{ env.asset_name }} -b -p ${{ env.install_dir }}

      - name: Install new distribution (MacOS)
        if: runner.os == 'macos'
        run: |
          echo "install_dir=/Users/runner" >> $GITHUB_ENV
          installer -pkg ${{ env.asset_name }} -target CurrentUserHomeDirectory

      - name: Install new distribution 1 (Windows)
        if: runner.os == 'windows'
        env:
          install_dir: '${{ github.workspace }}\nd'
        shell: bash
        run: |
          echo "install_dir=${{ env.install_dir }}" >> $GITHUB_ENV

      - name: Install new distribution 2 (Windows)
        if: runner.os == 'windows'
        shell: powershell
        run: |
          Start-Process -Wait -FilePath ${{ env.asset_name }} -ArgumentList "/S /AddToPath=0 /RegisterPython=0 /NoScripts=1 /D=${{ env.install_dir }}"

      - name: Upload artifact
        if: startsWith(github.ref, 'refs/tags/') != true
        uses: actions/upload-artifact@v2
        with:
          path: ${{ env.asset_name }}
          name: ${{ env.asset_name }}

      - shell: bash -l {0}
        name: Info new distribution
        run: |
          conda activate "${{ env.install_dir }}"
          conda info
          conda config --show channels
          conda config --show channel_priority
          conda list

      - shell: bash -l {0}
        name: Test new distribution
        run: |
          conda activate "${{ env.install_dir }}"
          conda install ${{ env.TEST_DEPS }}
          pytest --pyargs ${{ env.LIB_TO_TEST }}

      - name: Upload Release Asset
        if: startsWith(github.ref, 'refs/tags/')
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create_release_job.outputs.upload_url }}
          asset_path: ./${{ env.asset_name }}
          asset_name: ${{ env.asset_name }}
          asset_content_type: application/zip

  build_portable:
    name: windows (Portable)
    needs: create_release_job
    runs-on: windows-latest
    env:
      WP_URL: https://github.com/winpython/winpython/releases/download/3.0.20201028/Winpython64-3.8.6.0cod.exe
      WP_SHA256: d1457a5732825d0717f54e45e9d1f8ea890974e317d0b797a99b5d70b59d6839
      WP_EXE: winpython.exe
      WP_DIR_NAME: WPy64-3860
      MPLBACKEND: agg
      # remove `pytest-tornasync` test dependency when more recent jupyter_server is available
      # https://github.com/jupyter-server/jupyter_server/issues/337
      TEST_DEPS: pytest pytest-mpl pytest-tornasync
      LIB_TO_INSTALL: hyperspy[all] hyperspyui pyxem atomap kikuchipy
      LIB_TO_UPGRADE: hyperspy
      LIB_TO_TEST: hyperspy

    steps:
      - name: Download Winpython
        run: |
          Invoke-WebRequest -OutFile ${{ env.WP_EXE }} ${{ env.WP_URL }}
          ls
          $file_hash = (Get-FileHash ${{ env.WP_EXE }} ).Hash
          $file_hash 
          if ($file_hash -ne "${{ env.WP_SHA256 }}") { exit(1) }

      - name: Install Winpython
        run: |
          .\${{ env.WP_EXE }} -y | Out-Null
          ls
          ls ${{ env.WP_DIR_NAME }}

      - name: Install libraries
        shell: cmd
        run: |
          call "${{ env.WP_DIR_NAME }}\scripts\env.bat"
          where python
          where pip
          pip install --use-feature=2020-resolver ${{ env.LIB_TO_INSTALL }}
          pip install --upgrade --use-feature=2020-resolver ${{ env.LIB_TO_UPGRADE }}

      - shell: bash -l {0}
        name: Set installer name
        env:
          VERSION: ${{ needs.create_release_job.outputs.VERSION }}
        run: |
          installer_name=HyperSpy-bundle-${{ env.VERSION }}-Windows-x86_64-Portable.exe
          echo "asset_name=$installer_name" >> $GITHUB_ENV
          echo $installer_name

      - name: Run pyclean in distribution folder
        shell: cmd
        run: |
          where pip
          pip install pyclean
          where pyclean
          pyclean ${{ env.WP_DIR_NAME }}

      - name: Create installer
        run: |
          7z -mx5 -sfx a ${{ env.asset_name }} ${{ env.WP_DIR_NAME }}
          ls

      - name: Upload artifact
        if: startsWith(github.ref, 'refs/tags/') != true
        uses: actions/upload-artifact@v2
        with:
          path: ${{ env.asset_name }}

      - name: Install new distribution
        run: |
          Remove-Item -recurse ${{ env.WP_DIR_NAME }}
          ls
          .\${{ env.asset_name }} -y | Out-Null
          echo "After installation"
          ls
          echo ${{ env.asset_name }}

      - name: Install testing libraries
        shell: cmd
        run: |
          call "${{ env.WP_DIR_NAME }}\scripts\env.bat"
          pip install ${{ env.TEST_DEPS }}

      - name: Run test suite
        shell: cmd
        run: |
          call "${{ env.WP_DIR_NAME }}\scripts\env.bat"
          pytest --pyargs ${{ env.LIB_TO_TEST }}

      - name: Upload Release Asset
        if: startsWith(github.ref, 'refs/tags/')
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create_release_job.outputs.upload_url }}
          asset_path: ./${{ env.asset_name }}
          asset_name: ${{ env.asset_name }}
          asset_content_type: application/zip
